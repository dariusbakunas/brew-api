type Hop {
  id: ID!
  name: String!
  aaLow: Float
  aaHigh: Float
  betaLow: Float
  betaHigh: Float
  description: String
  bittering: Boolean!
  aroma: Boolean!
  origin: Country!
}

input HopInput {
  name: String!
  aaLow: Float
  aaHigh: Float
  betaLow: Float
  betaHigh: Float
  description: String
  bittering: Boolean!
  aroma: Boolean!
  originId: ID!
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum SortableHopField {
  name
}

type Metadata {
  currentCursor: String
  nextCursor: String
}

type HopsResponse {
  metadata: Metadata!
  hops: [Hop!]!
}

extend type Query {
  pagedHops(
    cursor: String,
    limit: Int!,
    sortDirection: SortDirection = ASCENDING,
    sortBy: SortableHopField
  ): HopsResponse! @hasScope(scope: ["activeUser"])
  hops: [Hop!]! @hasScope(scope: ["activeUser"])
}
extend type Mutation {
  createHop(input: HopInput!) : Hop! @hasScope(scope: ["activeUser", "createHop"])
  updateHop(id: ID!, input: HopInput!) : Hop! @hasScope(scope: ["updateHop"])
  removeHop(id: ID!): ID! @hasScope(scope: ["removeHop"])
}
