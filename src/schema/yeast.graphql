enum YeastForm {
  LIQUID,
  DRY
}

enum YeastType {
  ALE
  CHAMPAGNE
  LAGER
  WHEAT
  WINE
}

enum YeastFlocculation {
  LOW
  MEDIUM
  HIGH
}

type YeastLab {
  id: ID!
  name: String!
}

type Yeast {
  id: ID!
  description: String
  flocculation: YeastFlocculation
  form: YeastForm!
  lab: YeastLab!
  minTemp: Float
  maxTemp: Float
  minAttenuation: Float
  maxAttenuation: Float
  name: String!
  type: YeastType!
}

input YeastInput {
  description: String
  flocculation: YeastFlocculation = MEDIUM
  form: YeastForm!
  labId: ID!
  minTemp: Float
  maxTemp: Float
  minAttenuation: Float
  maxAttenuation: Float
  name: String!
  type: YeastType!
}

type YeastResponse {
  pageInfo: PageInfo!
  data: [Yeast!]!
}

enum SortableYeastField {
  NAME
}

extend type Query {
  yeast(
    cursor: String
    limit: Int = 10
    sortDirection: SortDirection = ASCENDING
    sortBy: SortableYeastField = NAME
  ) : YeastResponse!
  yeastLabs: [YeastLab!]!
}

extend type Mutation {
  createYeast(input: YeastInput!): Yeast!
  updateYeast(id: ID!, input: YeastInput!): Yeast!
  removeYeast(id: ID!): ID!
}
