enum UserStatus {
  ACTIVE
  INACTIVE
}

type Role {
  id: ID!
  name: String!
  code: String!
}

input RoleInput {
  name: String!
  code: String!
}

# used for createdBy fields or otherwise when we don't want to expose all user fields
type LimitedUser {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
}

type User {
  id: ID!
  username: String!
  firstName: String
  lastName: String
  email: String!
  status: UserStatus!
}

input RegistrationInput {
  firstName: String
  lastName: String
  username: String!
  email: String!
  code: String!
}

type ActivationResponse {
  success: Boolean!
}

input UserInput {
  firstName: String
  lastName: String
  email: String
  isAdmin: Boolean
  roleIds: [String!]
}

type Invitation {
  id: ID!
  code: String!
  email: String!
}

extend type Query {
  invitations: [Invitation!]!
  roles: [Role!]!
  users: [User!]!
  user(id: ID!): User
  userByEmail(email: String!): User
}

extend type Mutation {
  activateUser(token: String!): ActivationResponse!
  createInvitation(email: String!, sendEmail: Boolean): Invitation!
  createRole(input: RoleInput!): Role!
  deleteInvitation(email: String!): ID!
  register(input: RegistrationInput!): User
  removeUser(id: ID!): ID!
  updateUser(id: ID!, input: UserInput!): User!
}
