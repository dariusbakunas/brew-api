enum UserStatus {
  NEW
  ACTIVE
  INACTIVE
}

type Role {
  name: String!
}

type User {
  id: ID!
  username: String!
  firstName: String
  isAdmin: Boolean!
  lastName: String
  email: String!
  status: UserStatus!
  roles: [Role!]!
}

input RegistrationInput {
  firstName: String
  lastName: String
  username: String!
  email: String!
  code: String!
}

type ActivationResponse {
  success: Boolean!
}

input UserInput {
  firstName: String
  lastName: String
  username: String!
  email: String!
}

type Invitation {
  id: ID!
  code: String!
  email: String!
}

extend type Query {
  invitations: [Invitation!]!
  users: [User!]!
  userByEmail(email: String!): User
}

extend type Mutation {
  activateUser(token: String!): ActivationResponse!
  createInvitation(email: String!, sendEmail: Boolean): Invitation!
  deleteInvitation(email: String!): ID!
  register(input: RegistrationInput!): User!
  removeUser(id: ID!): ID!
}
